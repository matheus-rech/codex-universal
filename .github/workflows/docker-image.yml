name: Build image

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Adiciona controle de concorrência para evitar builds simultâneos
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-amd64:
    runs-on: ubuntu-24.04
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      success: ${{ steps.check.outputs.success }}
    steps:
      - name: Free disk
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL || true
          docker system prune -af || true
      
      - uses: actions/checkout@v4
      
      # IMPORTANTE: Corrige o Dockerfile ANTES do build
      - name: Fix Dockerfile for multi-arch compatibility
        run: |
          # Cria uma cópia do Dockerfile com versões mais flexíveis
          sed 's/libpq-dev=16\.9-\*/libpq-dev=16.*/' Dockerfile > Dockerfile.fixed
          # Opcional: verificar outras versões problemáticas e ajustá-las também
          # Por exemplo, se outros pacotes também tiverem problemas:
          # sed -i 's/outro-pacote=versao-especifica/outro-pacote=versao.*/' Dockerfile.fixed
          
          # Mostra a diferença para debug
          echo "=== Mudanças no Dockerfile ==="
          diff Dockerfile Dockerfile.fixed || true
          
          # Substitui o Dockerfile original
          mv Dockerfile.fixed Dockerfile
      
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      
      - name: Build & push (amd64)
        id: build
        uses: docker/build-push-action@v6
        continue-on-error: true
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name == 'push' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-${{ github.sha }}
          # Melhoria: usa cache do registry para main branch, GHA cache para PRs
          cache-from: |
            type=gha,scope=${{ github.workflow }}-${{ runner.os }}-amd64
            ${{ github.event_name == 'push' && format('type=registry,ref={0}/{1}:buildcache-amd64', env.REGISTRY, env.IMAGE_NAME) || '' }}
          cache-to: |
            ${{ github.event_name == 'push' && format('type=registry,ref={0}/{1}:buildcache-amd64,mode=max', env.REGISTRY, env.IMAGE_NAME) || format('type=gha,mode=min,scope={0}-{1}-amd64', github.workflow, runner.os) }}
          provenance: false
          sbom: false
          secrets: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
      
      - name: Check build status
        id: check
        if: always()
        run: |
          if [ "${{ steps.build.outcome }}" == "success" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi

  build-arm64:
    runs-on: ubuntu-24.04-arm
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      success: ${{ steps.check.outputs.success }}
    steps:
      # Reduz limpeza de disco para ARM (geralmente tem constraints diferentes)
      - name: Free disk (minimal)
        run: |
          docker system prune -af || true
      
      - uses: actions/checkout@v4
      
      # IMPORTANTE: Corrige o Dockerfile ANTES do build
      - name: Fix Dockerfile for multi-arch compatibility
        run: |
          # Cria uma cópia do Dockerfile com versões mais flexíveis
          sed 's/libpq-dev=16\.9-\*/libpq-dev=16.*/' Dockerfile > Dockerfile.fixed
          
          # Mostra a diferença para debug
          echo "=== Mudanças no Dockerfile ==="
          diff Dockerfile Dockerfile.fixed || true
          
          # Substitui o Dockerfile original
          mv Dockerfile.fixed Dockerfile
      
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      
      - name: Build & push (arm64)
        id: build
        uses: docker/build-push-action@v6
        continue-on-error: true
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: ${{ github.event_name == 'push' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-${{ github.sha }}
          cache-from: |
            type=gha,scope=${{ github.workflow }}-${{ runner.os }}-arm64
            ${{ github.event_name == 'push' && format('type=registry,ref={0}/{1}:buildcache-arm64', env.REGISTRY, env.IMAGE_NAME) || '' }}
          cache-to: |
            ${{ github.event_name == 'push' && format('type=registry,ref={0}/{1}:buildcache-arm64,mode=max', env.REGISTRY, env.IMAGE_NAME) || format('type=gha,mode=min,scope={0}-{1}-arm64', github.workflow, runner.os) }}
          provenance: false
          sbom: false
          secrets: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
      
      - name: Check build status
        id: check
        if: always()
        run: |
          if [ "${{ steps.build.outcome }}" == "success" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi

  manifest-and-attest:
    if: ${{ always() && github.event_name == 'push' && (needs.build-amd64.outputs.success == 'true' || needs.build-arm64.outputs.success == 'true') }}
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64]
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Stitch multi-arch manifest (:latest and :sha)
        run: |
          # Determine which images were built successfully
          IMAGES=""
          if [ "${{ needs.build-amd64.outputs.success }}" == "true" ]; then
            echo "AMD64 build succeeded"
            IMAGES="$IMAGES $REGISTRY/$IMAGE_NAME@${{ needs.build-amd64.outputs.digest }}"
          else
            echo "AMD64 build failed - skipping"
          fi
          
          if [ "${{ needs.build-arm64.outputs.success }}" == "true" ]; then
            echo "ARM64 build succeeded"
            IMAGES="$IMAGES $REGISTRY/$IMAGE_NAME@${{ needs.build-arm64.outputs.digest }}"
          else
            echo "ARM64 build failed - skipping"
          fi
          
          # Create manifest with available images
          if [ -n "$IMAGES" ]; then
            echo "Creating manifest with images: $IMAGES"
            docker buildx imagetools create \
              -t "$REGISTRY/$IMAGE_NAME:latest" \
              -t "$REGISTRY/$IMAGE_NAME:${GITHUB_SHA}" \
              $IMAGES
          else
            echo "ERROR: No images were built successfully!"
            exit 1
          fi

      - name: Get manifest digest
        id: manifest
        run: |
          DIGEST=$(docker buildx imagetools inspect "$REGISTRY/$IMAGE_NAME:latest" | awk '/^Digest:/{print $2; exit}')
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          push-to-registry: true
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.manifest.outputs.digest }}
      
      # Opcional: adiciona scan de segurança
      - name: Run Trivy scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true  # Não falha o build por vulnerabilidades
      
      # Upload dos resultados do scan (se você tiver GitHub Advanced Security)
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
